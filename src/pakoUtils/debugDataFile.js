// Escaped JSON - http://www.freeformatter.com/javascript-escape.html
export const debugData = '{\"components\":[{\"type\":\"MarkdownEditor\",\"mode\":\"view\",\"content\":{\"version\":\"2.0\",\"text\":\"While support for ES6 is increasing for evergreen browsers such as Chrome and Firefox, we can\'t always assume that users will be on one of those browsers. So, in order to utilize ES6 features now and make sure we won\'t run into cross-browser compatibility issues, we need to transpile our code.\\n\\nLet\'s look at two possible ways we can perform the task of transpiling our code. First, we will use npm scripts and babel, and for the second, we will look at using gulp with babel.\\n\\n## Babel\\n\\nBabel <sup>(1)<\/sup> is the go-to transpiler for ES6. It was originally called 6to5, but was later renamed to Babel as it was apparent that the name would not work moving forward <sup>(2)<\/sup>. With the release of Babel 6, the focus turned more towards making Babel pluggable. It created a system that allows you to create plugins to transform your code! The default action for Babel in version 6 is not to transform your ES6 to ES5 anymore, so you now have to include various presets.\\n\\nThe presets in Babel allow you to either pick and choose the transformations that you want, or you can select the `babel-preset-es2015` preset and work with all the features.\\n\\n## Babel CLI\\n\\nIn order to work with the two methods that we will look at, it is important to make sure you have Node.js installed. The easiest method would be to head over to the Node.js website and download the latest version for your operating system.\\n\\nIf everything goes as planned, you should have `node` available to you in your terminal. To confirm that Node.js is installed on your system, open your terminal and type `node -v` into the prompt.\",\"mdHtml\":\"<p>While support for ES6 is increasing for evergreen browsers such as Chrome and Firefox, we can\u2019t always assume that users will be on one of those browsers. So, in order to utilize ES6 features now and make sure we won\u2019t run into cross-browser compatibility issues, we need to transpile our code.<\/p>\\n<p>Let\u2019s look at two possible ways we can perform the task of transpiling our code. First, we will use npm scripts and babel, and for the second, we will look at using gulp with babel.<\/p>\\n<h2>Babel<\/h2>\\n<p>Babel <sup>(1)<\/sup> is the go-to transpiler for ES6. It was originally called 6to5, but was later renamed to Babel as it was apparent that the name would not work moving forward <sup>(2)<\/sup>. With the release of Babel 6, the focus turned more towards making Babel pluggable. It created a system that allows you to create plugins to transform your code! The default action for Babel in version 6 is not to transform your ES6 to ES5 anymore, so you now have to include various presets.<\/p>\\n<p>The presets in Babel allow you to either pick and choose the transformations that you want, or you can select the <code>babel-preset-es2015<\/code> preset and work with all the features.<\/p>\\n<h2>Babel CLI<\/h2>\\n<p>In order to work with the two methods that we will look at, it is important to make sure you have Node.js installed. The easiest method would be to head over to the Node.js website and download the latest version for your operating system.<\/p>\\n<p>If everything goes as planned, you should have <code>node<\/code> available to you in your terminal. To confirm that Node.js is installed on your system, open your terminal and type <code>node -v<\/code> into the prompt.<\/p>\\n\",\"comp_id\":\"1dc1c664-5344-4765-8cdd-f6128dd623b8\"},\"hash\":\"1\",\"iteration\":0},{\"type\":\"Code\",\"mode\":\"view\",\"content\":{\"solutionContent\":\"\\n\\n\\n\",\"judgeContent\":null,\"hiddenCodeContent\":null,\"enableStdin\":false,\"caption\":\"\",\"theme\":\"default\",\"evaluateWithoutExecution\":false,\"comp_id\":\"aae01f12-d671-48ba-94ea-99da09aff496\",\"allowDownload\":false,\"additionalContent\":[],\"showSolution\":false,\"selectedIndex\":0,\"judge\":false,\"treatOutputAsHTML\":false,\"version\":\"5.0\",\"title\":\"\",\"language\":\"javascript\",\"content\":\"$ node -v\\nv5.2.0\",\"enableHiddenCode\":false,\"runnable\":false},\"hash\":\"2\",\"iteration\":0},{\"type\":\"MarkdownEditor\",\"mode\":\"view\",\"content\":{\"version\":\"2.0\",\"text\":\"\\nIf you get a response that looks something like what you see above, you are good to go! If you are not super comfortable with the command line, I suggest checking out commandlinepoweruser.com <sup>(3)<\/sup> by Wes Bos. It\'s a great free video series to help you quickly get up and running with the common commands.\\n\\nOnce we have Node up and running we need to install the Babel CLI. To do so we will use npm. To test this, create a project folder and navigate there in the terminal. To get started we need to create a `package.json` file. To get this started with npm, we can run:\",\"mdHtml\":\"<p>If you get a response that looks something like what you see above, you are good to go! If you are not super comfortable with the command line, I suggest checking out <a href=\\\"http:\/\/commandlinepoweruser.com\\\">commandlinepoweruser.com<\/a> <sup>(3)<\/sup> by Wes Bos. It\u2019s a great free video series to help you quickly get up and running with the common commands.<\/p>\\n<p>Once we have Node up and running we need to install the Babel CLI. To do so we will use npm. To test this, create a project folder and navigate there in the terminal. To get started we need to create a <code>package.json<\/code> file. To get this started with npm, we can run:<\/p>\\n\",\"comp_id\":\"516817a2-7360-4c48-a240-e489606d2a1b\"},\"hash\":\"3\",\"iteration\":0},{\"type\":\"Code\",\"mode\":\"view\",\"content\":{\"solutionContent\":\"\\n\\n\\n\",\"judgeContent\":null,\"hiddenCodeContent\":null,\"enableStdin\":false,\"caption\":\"\",\"theme\":\"default\",\"evaluateWithoutExecution\":false,\"comp_id\":\"57038ddd-f0c6-4bad-a124-f9b4f872bc87\",\"allowDownload\":false,\"additionalContent\":[],\"showSolution\":false,\"selectedIndex\":0,\"judge\":false,\"treatOutputAsHTML\":false,\"version\":\"5.0\",\"title\":\"\",\"language\":\"javascript\",\"content\":\"npm init\",\"enableHiddenCode\":false,\"runnable\":false},\"hash\":\"4\",\"iteration\":0},{\"type\":\"MarkdownEditor\",\"mode\":\"view\",\"content\":{\"version\":\"2.0\",\"text\":\"\\nThis will walk you through a few questions: what is the name of your project, version, description, etc. When it asks you about the `entry point`, you can leave it as `index.js` for now. Typically this would be the main file for your project. If you know ahead of time what that will be, add it there.\\n\\nOnce you are done with these steps, a new `package.json` file will have been created. Now, it\'s time to install the babel package we need.\",\"mdHtml\":\"<p>This will walk you through a few questions: what is the name of your project, version, description, etc. When it asks you about the <code>entry point<\/code>, you can leave it as <code>index.js<\/code> for now. Typically this would be the main file for your project. If you know ahead of time what that will be, add it there.<\/p>\\n<p>Once you are done with these steps, a new <code>package.json<\/code> file will have been created. Now, it\u2019s time to install the babel package we need.<\/p>\\n\",\"comp_id\":\"9dec954c-07a5-41dc-ad50-2ef4e7561ce4\"},\"hash\":\"5\",\"iteration\":0},{\"type\":\"Code\",\"mode\":\"view\",\"content\":{\"solutionContent\":\"\\n\\n\\n\",\"judgeContent\":null,\"hiddenCodeContent\":null,\"enableStdin\":false,\"caption\":\"\",\"theme\":\"default\",\"evaluateWithoutExecution\":false,\"comp_id\":\"b2ec6361-9149-4505-b5e6-29e82eb25da0\",\"allowDownload\":false,\"additionalContent\":[],\"showSolution\":false,\"selectedIndex\":0,\"judge\":false,\"treatOutputAsHTML\":false,\"version\":\"5.0\",\"title\":\"\",\"language\":\"javascript\",\"content\":\"npm install --save-dev babel-cli\",\"enableHiddenCode\":false,\"runnable\":false},\"hash\":\"6\",\"iteration\":0},{\"type\":\"MarkdownEditor\",\"mode\":\"view\",\"content\":{\"version\":\"2.0\",\"text\":\"\\nAfter running this line you will see a few new changes in your project directory. First, you will notice that there is now a `node_modules` folder, and second, that there is a new entry inside your `package.json` file. There is one key part to the code above: the `--save-dev` flag. This flag will save the module, `babel-cli`, in your package.json file under `devDependencies` section.\",\"mdHtml\":\"<p>After running this line you will see a few new changes in your project directory. First, you will notice that there is now a <code>node_modules<\/code> folder, and second, that there is a new entry inside your <code>package.json<\/code> file. There is one key part to the code above: the <code>--save-dev<\/code> flag. This flag will save the module, <code>babel-cli<\/code>, in your package.json file under <code>devDependencies<\/code> section.<\/p>\\n\",\"comp_id\":\"defea9ff-bf50-4512-a325-f590de388745\"},\"hash\":\"7\",\"iteration\":0},{\"type\":\"Code\",\"mode\":\"view\",\"content\":{\"solutionContent\":\"\\n\\n\\n\",\"judgeContent\":null,\"hiddenCodeContent\":null,\"enableStdin\":false,\"caption\":\"\",\"theme\":\"default\",\"evaluateWithoutExecution\":false,\"comp_id\":\"5c7d93bc-9d70-4878-b49b-05f85e846a63\",\"allowDownload\":false,\"additionalContent\":[],\"showSolution\":false,\"selectedIndex\":0,\"judge\":false,\"treatOutputAsHTML\":false,\"version\":\"5.0\",\"title\":\"\",\"language\":\"javascript\",\"content\":\"\\\"devDependencies\\\": {\\n  \\\"babel-cli\\\": \\\"^6.6.5\\\"\\n},\",\"enableHiddenCode\":false,\"runnable\":false},\"hash\":\"8\",\"iteration\":0},{\"type\":\"MarkdownEditor\",\"mode\":\"view\",\"content\":{\"version\":\"2.0\",\"text\":\"\\nThis section in the file is used for modules that will be used in development, meaning they are not needed in production. If we had run our install with `--save` instead, it would put the module under the `dependencies` section.\\n\\nBut, what is the point of all these sections? If you are unfamiliar with npm and the `package.json` file, it\'s a file that you can take from project to project and run `npm install` and anything listed in `devDependencies` or `dependencies` will be installed for that project. If you wanted to install just the `dependencies` you could run:\",\"mdHtml\":\"<p>This section in the file is used for modules that will be used in development, meaning they are not needed in production. If we had run our install with <code>--save<\/code> instead, it would put the module under the <code>dependencies<\/code> section.<\/p>\\n<p>But, what is the point of all these sections? If you are unfamiliar with npm and the <code>package.json<\/code> file, it\u2019s a file that you can take from project to project and run <code>npm install<\/code> and anything listed in <code>devDependencies<\/code> or <code>dependencies<\/code> will be installed for that project. If you wanted to install just the <code>dependencies<\/code> you could run:<\/p>\\n\",\"comp_id\":\"d0d225b3-dba0-4d1f-b220-d3fc7b4c09c7\"},\"hash\":\"9\",\"iteration\":0},{\"type\":\"Code\",\"mode\":\"view\",\"content\":{\"solutionContent\":\"\\n\\n\\n\",\"judgeContent\":null,\"hiddenCodeContent\":null,\"enableStdin\":false,\"caption\":\"\",\"theme\":\"default\",\"evaluateWithoutExecution\":false,\"comp_id\":\"9728673a-42e1-4c74-8916-d7db1b5e88a5\",\"allowDownload\":false,\"additionalContent\":[],\"showSolution\":false,\"selectedIndex\":0,\"judge\":false,\"treatOutputAsHTML\":false,\"version\":\"5.0\",\"title\":\"\",\"language\":\"javascript\",\"content\":\"npm install --production\",\"enableHiddenCode\":false,\"runnable\":false},\"hash\":\"10\",\"iteration\":0},{\"type\":\"MarkdownEditor\",\"mode\":\"view\",\"content\":{\"version\":\"2.0\",\"text\":\"\\nThere will be cases when you are developing your apps that you will want to use certain modules exclusively for development, and certain modules exclusively for production. Using `--save` and `--save-dev` you can put those modules in the right buckets.\\n\\n## Babel Presets\\n\\nAs mentioned earlier, Babel does not default to transpiling ES6 right off the bat. We have to include the `babel-preset-es2015` module as well.\",\"mdHtml\":\"<p>There will be cases when you are developing your apps that you will want to use certain modules exclusively for development, and certain modules exclusively for production. Using <code>--save<\/code> and <code>--save-dev<\/code> you can put those modules in the right buckets.<\/p>\\n<h2>Babel Presets<\/h2>\\n<p>As mentioned earlier, Babel does not default to transpiling ES6 right off the bat. We have to include the <code>babel-preset-es2015<\/code> module as well.<\/p>\\n\",\"comp_id\":\"2d40b5b7-532f-4201-97d3-027e138cbf42\"},\"hash\":\"11\",\"iteration\":0},{\"type\":\"Code\",\"mode\":\"view\",\"content\":{\"solutionContent\":\"\\n\\n\\n\",\"judgeContent\":null,\"hiddenCodeContent\":null,\"enableStdin\":false,\"caption\":\"\",\"theme\":\"default\",\"evaluateWithoutExecution\":false,\"comp_id\":\"7721e603-efbd-4f76-a1d6-9001bc7ea4c1\",\"allowDownload\":false,\"additionalContent\":[],\"showSolution\":false,\"selectedIndex\":0,\"judge\":false,\"treatOutputAsHTML\":false,\"version\":\"5.0\",\"title\":\"\",\"language\":\"javascript\",\"content\":\"npm install --save-dev babel-preset-es2015\",\"enableHiddenCode\":false,\"runnable\":false},\"hash\":\"12\",\"iteration\":0},{\"type\":\"MarkdownEditor\",\"mode\":\"view\",\"content\":{\"version\":\"2.0\",\"text\":\"\\nThis module ensures that we have the ability to transpile our code.\\n\\n### Folder structure\\n\\nBefore we go too far, lets talk about folder structure. If you are going to be following along, I have set up my folder structure as follows:\",\"mdHtml\":\"<p>This module ensures that we have the ability to transpile our code.<\/p>\\n<h3>Folder structure<\/h3>\\n<p>Before we go too far, lets talk about folder structure. If you are going to be following along, I have set up my folder structure as follows:<\/p>\\n\",\"comp_id\":\"ee10267a-0ec7-421e-bcf5-5d0e80b785cc\"},\"hash\":\"13\",\"iteration\":0},{\"type\":\"Code\",\"mode\":\"view\",\"content\":{\"solutionContent\":\"\\n\\n\\n\",\"judgeContent\":null,\"hiddenCodeContent\":null,\"enableStdin\":false,\"caption\":\"\",\"theme\":\"default\",\"evaluateWithoutExecution\":false,\"comp_id\":\"c207739c-657d-4876-a568-57ca124e260b\",\"allowDownload\":false,\"additionalContent\":[],\"showSolution\":false,\"selectedIndex\":0,\"judge\":false,\"treatOutputAsHTML\":false,\"version\":\"5.0\",\"title\":\"\",\"language\":\"javascript\",\"content\":\"- project\\n    - src\\n      - app.js\\n    - public\\n    - package.json\",\"enableHiddenCode\":false,\"runnable\":false},\"hash\":\"14\",\"iteration\":0},{\"type\":\"MarkdownEditor\",\"mode\":\"view\",\"content\":{\"version\":\"2.0\",\"text\":\"\\nIn the root `project` folder I have a `src` folder and a `public` folder. The `src` folder is used to hold my pre-transpiled code. This would be the code that is written with the nice ES6 syntax, while the `public` folder will be the destination for our transpiled code. The `public` folder would also hold the CSS, HTML, and images that your app requires.\\n\\n## NPM Script\\n\\nThe first method of transpiling we will look at is using NPM to run Babel. In the `package.json` file there is a section called `scripts` where we can define commands we would like to run. Using the Babel CLI we can set up a script to compile our code and output it where we would like. The `scripts` section takes a JSON object as a value. The keys in this object will be the name of our script and the value will be the command to run.\",\"mdHtml\":\"<p>In the root <code>project<\/code> folder I have a <code>src<\/code> folder and a <code>public<\/code> folder. The <code>src<\/code> folder is used to hold my pre-transpiled code. This would be the code that is written with the nice ES6 syntax, while the <code>public<\/code> folder will be the destination for our transpiled code. The <code>public<\/code> folder would also hold the CSS, HTML, and images that your app requires.<\/p>\\n<h2>NPM Script<\/h2>\\n<p>The first method of transpiling we will look at is using NPM to run Babel. In the <code>package.json<\/code> file there is a section called <code>scripts<\/code> where we can define commands we would like to run. Using the Babel CLI we can set up a script to compile our code and output it where we would like. The <code>scripts<\/code> section takes a JSON object as a value. The keys in this object will be the name of our script and the value will be the command to run.<\/p>\\n\",\"comp_id\":\"528fe95e-d60e-44b2-ba63-74b01d14215d\"},\"hash\":\"15\",\"iteration\":0},{\"type\":\"Code\",\"mode\":\"view\",\"content\":{\"solutionContent\":\"\\n\\n\\n\",\"judgeContent\":null,\"hiddenCodeContent\":null,\"enableStdin\":false,\"caption\":\"\",\"theme\":\"default\",\"evaluateWithoutExecution\":false,\"comp_id\":\"2db01d8b-d005-4b68-b382-c200aadf9673\",\"allowDownload\":false,\"additionalContent\":[],\"showSolution\":false,\"selectedIndex\":0,\"judge\":false,\"treatOutputAsHTML\":false,\"version\":\"5.0\",\"title\":\"\",\"language\":\"javascript\",\"content\":\"\\\"scripts\\\": {\\n  \\\"js\\\" : \\\"babel src\/app.js --out-file public\/app.js\\\"\\n}\",\"enableHiddenCode\":false,\"runnable\":false},\"hash\":\"16\",\"iteration\":0},{\"type\":\"MarkdownEditor\",\"mode\":\"view\",\"content\":{\"version\":\"2.0\",\"text\":\"\\nAdding the above to our `package.json` in the `scripts` section will take our code from `src\/app.js`, run it through Babel, and output the file in `public\/app.js`. The Babel command has many options to it that we will look at later, but the `--out-file` flag is used to determine the destination of the compiled source.\\n\\nGo ahead and add some ES6 code to the `src\/app.js` file. If you don\'t know what to add, try this:\",\"mdHtml\":\"<p>Adding the above to our <code>package.json<\/code> in the <code>scripts<\/code> section will take our code from <code>src\/app.js<\/code>, run it through Babel, and output the file in <code>public\/app.js<\/code>. The Babel command has many options to it that we will look at later, but the <code>--out-file<\/code> flag is used to determine the destination of the compiled source.<\/p>\\n<p>Go ahead and add some ES6 code to the <code>src\/app.js<\/code> file. If you don\u2019t know what to add, try this:<\/p>\\n\",\"comp_id\":\"116a9e62-1bd1-413b-a28f-6660414b6210\"},\"hash\":\"17\",\"iteration\":0},{\"type\":\"Code\",\"mode\":\"view\",\"content\":{\"solutionContent\":\"\\n\\n\\n\",\"judgeContent\":null,\"hiddenCodeContent\":null,\"enableStdin\":false,\"caption\":\"\",\"theme\":\"default\",\"evaluateWithoutExecution\":false,\"comp_id\":\"7174a2bf-16c7-42d6-8ece-877c15e955e0\",\"allowDownload\":false,\"additionalContent\":[],\"showSolution\":false,\"selectedIndex\":0,\"judge\":false,\"treatOutputAsHTML\":false,\"version\":\"5.0\",\"title\":\"\",\"language\":\"javascript\",\"content\":\"const person = {\\n  name: \'Ryan Christiani\'\\n};\\n\\nconst testString = `My name is ${person.name}`;\",\"enableHiddenCode\":false,\"runnable\":false},\"hash\":\"18\",\"iteration\":0},{\"type\":\"MarkdownEditor\",\"mode\":\"view\",\"content\":{\"version\":\"2.0\",\"text\":\"\\nIf you type `npm run js` into your terminal you should have an output of something like this:\",\"mdHtml\":\"<p>If you type <code>npm run js<\/code> into your terminal you should have an output of something like this:<\/p>\\n\",\"comp_id\":\"8919f5b3-1bc8-4435-bb67-f95077b79a2b\"},\"hash\":\"19\",\"iteration\":0},{\"type\":\"Code\",\"mode\":\"view\",\"content\":{\"solutionContent\":\"\\n\\n\\n\",\"judgeContent\":null,\"hiddenCodeContent\":null,\"enableStdin\":false,\"caption\":\"\",\"theme\":\"default\",\"evaluateWithoutExecution\":false,\"comp_id\":\"4b59b708-1272-4a8f-8e38-70c804662bc7\",\"allowDownload\":false,\"additionalContent\":[],\"showSolution\":false,\"selectedIndex\":0,\"judge\":false,\"treatOutputAsHTML\":false,\"version\":\"5.0\",\"title\":\"\",\"language\":\"javascript\",\"content\":\"> testfiles@1.0.0 js \/Users\/yourusername\/path\/to\/project\\n> babel .\/src\/app.js --out-file .\/public\/app.js\",\"enableHiddenCode\":false,\"runnable\":false},\"hash\":\"20\",\"iteration\":0},{\"type\":\"MarkdownEditor\",\"mode\":\"view\",\"content\":{\"version\":\"2.0\",\"text\":\"\\nNow, the moment of truth: let\'s look in the `public\/app.js` file. Note that if you did not create one before, Babel will go ahead and create it for you.\",\"mdHtml\":\"<p>Now, the moment of truth: let\u2019s look in the <code>public\/app.js<\/code> file. Note that if you did not create one before, Babel will go ahead and create it for you.<\/p>\\n\",\"comp_id\":\"03053441-d28d-4b03-87ae-68c40afaf193\"},\"hash\":\"21\",\"iteration\":0},{\"type\":\"WebpackBin\",\"mode\":\"edit\",\"content\":{\"version\":2,\"theme\":\"default\",\"showLineNumbers\":true,\"hideCodeView\":false,\"loaders\":{\"babel\":{\"title\":\"React\",\"config\":{\"es2015\":true,\"react\":true},\"enabled\":true},\"css\":{\"title\":\"CSS (.css, .less, .scss)\",\"config\":{\"css\":true,\"less\":false,\"sass\":false},\"enabled\":true}},\"outputHeight\":300,\"codePanelHeight\":300,\"codeContents\":{\"module\":\"\/\",\"id\":0,\"maxId\":4,\"selectedId\":4,\"children\":[{\"id\":1,\"module\":\"index.html\",\"leaf\":true,\"data\":{\"content\":\"<html>\\r\\n    <head>\\r\\n        <meta charset=\\\"utf-8\\\">\\r\\n      \\t<link rel=\'stylesheet\' type=\'text\/css\' href=\'bundle.css\'\/>\\r\\n      \\t<script src=\\\"https:\/\/fb.me\/react-0.14.6.js\\\"><\/script>\\r\\n        <script src=\\\"https:\/\/fb.me\/react-dom-0.14.6.js\\\"><\/script>\\r\\n    <\/head>\\r\\n    <body>\\r\\n      <div id=\\\"content\\\"><\/div>\\r\\n      <script type=\\\"text\/javascript\\\" src=\\\"bundle.js\\\" charset=\\\"utf-8\\\"><\/script>\\r\\n    <\/body>\\r\\n<\/html>\\r\\n\",\"language\":\"html\",\"staticFile\":true,\"hidden\":false,\"highlightedLines\":null}},{\"id\":2,\"module\":\"index.js\",\"leaf\":true,\"data\":{\"content\":\"import ReactDOM from \'react-dom\';\\r\\nimport App from \'.\/app.js\';\\r\\n\\r\\nReactDOM.render(\\r\\n  <App \/>,\\r\\n  document.getElementById(\'content\')\\r\\n);\\r\\n\",\"language\":\"jsx\",\"staticFile\":true,\"hidden\":false,\"highlightedLines\":null}},{\"id\":3,\"module\":\"app.js\",\"leaf\":true,\"data\":{\"content\":\"import React from \'react\';\\nrequire(\'.\/style.css\');\\n\\nexport default class App extends React.Component {\\n  render() {\\n    return (\\n      <p>Hello, Hello!<\/p>\\n    );\\n  }\\n}\\n\",\"language\":\"jsx\",\"staticFile\":false,\"hidden\":false,\"highlightedLines\":null}}]},\"comp_id\":\"15602c15-24a6-44e2-844b-ceaf56d2f1f3\"},\"hash\":\"42\",\"iteration\":3},{\"type\":\"Code\",\"mode\":\"view\",\"content\":{\"solutionContent\":\"\\n\\n\\n\",\"judgeContent\":null,\"hiddenCodeContent\":null,\"enableStdin\":false,\"caption\":\"\",\"theme\":\"default\",\"evaluateWithoutExecution\":false,\"comp_id\":\"06c06d83-c8f8-401f-959b-19e1f93e67a1\",\"allowDownload\":false,\"additionalContent\":[],\"showSolution\":false,\"selectedIndex\":0,\"judge\":false,\"treatOutputAsHTML\":false,\"version\":\"5.0\",\"title\":\"\",\"language\":\"javascript\",\"content\":\"const person = {\\n  name: \'Ryan Christiani\'\\n};\\n\\nconst testString = `My name is ${person.name}`;\",\"enableHiddenCode\":false,\"runnable\":false},\"hash\":\"22\",\"iteration\":0},{\"type\":\"MarkdownEditor\",\"mode\":\"view\",\"content\":{\"version\":\"2.0\",\"text\":\"\\nHuh... this looks exactly the same. That is because we have not utilized the `es2015` preset yet!\\n\\n### babelrc\\n\\nIn order to tell Babel that we want to use presets that we have downloaded, we need to create a configuration file. This file is called `.babelrc`. If you have never worked with a dot-file before, you might think that it is a bit odd! Dot-files are meant to be hidden files and are typically used to store configuration information, or just to keep things hidden. By default you cannot see dot-files on your computer, however a quick Google search will show you how to turn them on for your finder. Since we are on the terminal, we can use the `ls -a` command to show any file or folder that starts with a `.`. \\n\\nSublime Text (the editor I am using throughout this book) or Atom will show you these files if you open your project folder in the editor.\\n\\nIn order to configure Babel to use our preset, we need to add this code to the `.babelrc` file.\",\"mdHtml\":\"<p>Huh\u2026 this looks exactly the same. That is because we have not utilized the <code>es2015<\/code> preset yet!<\/p>\\n<h3>babelrc<\/h3>\\n<p>In order to tell Babel that we want to use presets that we have downloaded, we need to create a configuration file. This file is called <code>.babelrc<\/code>. If you have never worked with a dot-file before, you might think that it is a bit odd! Dot-files are meant to be hidden files and are typically used to store configuration information, or just to keep things hidden. By default you cannot see dot-files on your computer, however a quick Google search will show you how to turn them on for your finder. Since we are on the terminal, we can use the <code>ls -a<\/code> command to show any file or folder that starts with a <code>.<\/code>.<\/p>\\n<p>Sublime Text (the editor I am using throughout this book) or Atom will show you these files if you open your project folder in the editor.<\/p>\\n<p>In order to configure Babel to use our preset, we need to add this code to the <code>.babelrc<\/code> file.<\/p>\\n\",\"comp_id\":\"89295ae1-75e8-4455-ba61-d18884274024\"},\"hash\":\"23\",\"iteration\":0},{\"type\":\"Code\",\"mode\":\"view\",\"content\":{\"solutionContent\":\"\\n\\n\\n\",\"judgeContent\":null,\"hiddenCodeContent\":null,\"enableStdin\":false,\"caption\":\"\",\"theme\":\"default\",\"evaluateWithoutExecution\":false,\"comp_id\":\"02a61ca8-94f6-49ff-aa12-b87998fe2c9a\",\"allowDownload\":false,\"additionalContent\":[],\"showSolution\":false,\"selectedIndex\":0,\"judge\":false,\"treatOutputAsHTML\":false,\"version\":\"5.0\",\"title\":\"\",\"language\":\"javascript\",\"content\":\"{ \\n  \\\"presets\\\": [\\\"es2015\\\"] \\n}\",\"enableHiddenCode\":false,\"runnable\":false},\"hash\":\"24\",\"iteration\":0},{\"type\":\"MarkdownEditor\",\"mode\":\"view\",\"content\":{\"version\":\"2.0\",\"text\":\"\\nBabel configuration files take a JSON object with a `presets` key that contains an array of the presets you would like to use. There are many presets you can use, check out the Babel docs <sup>(4)<\/sup> for more information. Now, if you run `npm run js` it will properly transpile our code, changing the output to look like this:\",\"mdHtml\":\"<p>Babel configuration files take a JSON object with a <code>presets<\/code> key that contains an array of the presets you would like to use. There are many presets you can use, check out the Babel docs <sup>(4)<\/sup> for more information. Now, if you run <code>npm run js<\/code> it will properly transpile our code, changing the output to look like this:<\/p>\\n\",\"comp_id\":\"f654e201-aeff-471d-a95d-e888288cbf7e\"},\"hash\":\"25\",\"iteration\":0},{\"type\":\"Code\",\"mode\":\"view\",\"content\":{\"solutionContent\":\"\\n\\n\\n\",\"judgeContent\":null,\"hiddenCodeContent\":null,\"enableStdin\":false,\"caption\":\"\",\"theme\":\"default\",\"evaluateWithoutExecution\":false,\"comp_id\":\"40fe6950-5e95-45de-b321-9ad9479b440b\",\"allowDownload\":false,\"additionalContent\":[],\"showSolution\":false,\"selectedIndex\":0,\"judge\":false,\"treatOutputAsHTML\":false,\"version\":\"5.0\",\"title\":\"\",\"language\":\"javascript\",\"content\":\"\'use strict\';\\n\\nvar person = {\\n  name: \'Ryan Christiani\'\\n};\\n\\nvar testString = \'My name is \' + person.name;\",\"enableHiddenCode\":false,\"runnable\":false},\"hash\":\"26\",\"iteration\":0},{\"type\":\"MarkdownEditor\",\"mode\":\"view\",\"content\":{\"version\":\"2.0\",\"text\":\"\\nThis is great, however let\'s make our script a little more robust. Right now, when we run the script, it will output the file and stop. If you want to keep working on the file we need to run this over and over again. We can configure the script to watch over the files and run when they change!\",\"mdHtml\":\"<p>This is great, however let\u2019s make our script a little more robust. Right now, when we run the script, it will output the file and stop. If you want to keep working on the file we need to run this over and over again. We can configure the script to watch over the files and run when they change!<\/p>\\n\",\"comp_id\":\"82c1be10-9671-4900-ac32-b03fcbcd85a6\"},\"hash\":\"27\",\"iteration\":0},{\"type\":\"Code\",\"mode\":\"view\",\"content\":{\"solutionContent\":\"\\n\\n\\n\",\"judgeContent\":null,\"hiddenCodeContent\":null,\"enableStdin\":false,\"caption\":\"\",\"theme\":\"default\",\"evaluateWithoutExecution\":false,\"comp_id\":\"73700ddf-a9fe-4a60-94e5-b669c18b06d2\",\"allowDownload\":false,\"additionalContent\":[],\"showSolution\":false,\"selectedIndex\":0,\"judge\":false,\"treatOutputAsHTML\":false,\"version\":\"5.0\",\"title\":\"\",\"language\":\"javascript\",\"content\":\"\\\"scripts\\\": {\\n  \\\"js\\\": \\\"babel .\/src\/app.js --watch --out-file .\/public\/app.js\\\"\\n}\",\"enableHiddenCode\":false,\"runnable\":false},\"hash\":\"28\",\"iteration\":0},{\"type\":\"MarkdownEditor\",\"mode\":\"view\",\"content\":{\"version\":\"2.0\",\"text\":\"\\nBy adding the `--watch` flag, we are telling Babel to listen for any changes in the `src\/app.js` file, and when changes are made we want to output a transpiled version of that code to `public\/app.js`. There are plenty more things you can do with npm scripts and the Babel CLI <sup>(5)<\/sup>, however let\'s see how we can use Gulp <sup>(6)<\/sup> and Babel to transpile our code!\\n\\n## Gulp\\n\\nGulp is a popular task runner that helps to automate your workflow. There are a ton of different task runners out there, including Grunt, Broccoli, and Brunch. For this book, we will look at how to configure Gulp to automate working with Babel, and later on in the book, we will use this to work with modules as well. So lets get started!\\n\\n### Getting started with Gulp\\n\\nIn order to get started with Gulp, we need to install it globally on our system. Gulp is another npm module, so we install it like such: `npm install --global gulp-cli`. When working with gulp we have to install it globally only once, and also locally in each new project. We can do this by running: `npm install --save-dev gulp`.\\n\\n#### gulpfile.js\\n\\nTo configure gulp we must first create a new file called `gulpfile.js`; this will be used to define our tasks. If you have never worked in Node before, you might not be familiar with the `require` function. This is a function that will pull in any modules from the `node_modules` folder, or your own modules. Since we ran `npm install --save-dev gulp` that placed it in our `node_modules` folder. In the `gulpfile.js` we can get access to `gulp` by requiring it.\",\"mdHtml\":\"<p>By adding the <code>--watch<\/code> flag, we are telling Babel to listen for any changes in the <code>src\/app.js<\/code> file, and when changes are made we want to output a transpiled version of that code to <code>public\/app.js<\/code>. There are plenty more things you can do with npm scripts and the Babel CLI <sup>(5)<\/sup>, however let\u2019s see how we can use Gulp <sup>(6)<\/sup> and Babel to transpile our code!<\/p>\\n<h2>Gulp<\/h2>\\n<p>Gulp is a popular task runner that helps to automate your workflow. There are a ton of different task runners out there, including Grunt, Broccoli, and Brunch. For this book, we will look at how to configure Gulp to automate working with Babel, and later on in the book, we will use this to work with modules as well. So lets get started!<\/p>\\n<h3>Getting started with Gulp<\/h3>\\n<p>In order to get started with Gulp, we need to install it globally on our system. Gulp is another npm module, so we install it like such: <code>npm install --global gulp-cli<\/code>. When working with gulp we have to install it globally only once, and also locally in each new project. We can do this by running: <code>npm install --save-dev gulp<\/code>.<\/p>\\n<h4>gulpfile.js<\/h4>\\n<p>To configure gulp we must first create a new file called <code>gulpfile.js<\/code>; this will be used to define our tasks. If you have never worked in Node before, you might not be familiar with the <code>require<\/code> function. This is a function that will pull in any modules from the <code>node_modules<\/code> folder, or your own modules. Since we ran <code>npm install --save-dev gulp<\/code> that placed it in our <code>node_modules<\/code> folder. In the <code>gulpfile.js<\/code> we can get access to <code>gulp<\/code> by requiring it.<\/p>\\n\",\"comp_id\":\"f0fbce12-f2e8-4f53-8c60-403b8c71b440\"},\"hash\":\"29\",\"iteration\":0},{\"type\":\"Code\",\"mode\":\"view\",\"content\":{\"solutionContent\":\"\\n\\n\\n\",\"judgeContent\":null,\"hiddenCodeContent\":null,\"enableStdin\":false,\"caption\":\"\",\"theme\":\"default\",\"evaluateWithoutExecution\":false,\"comp_id\":\"3f518c9c-ecc6-459e-b873-2396df56a7ff\",\"allowDownload\":false,\"additionalContent\":[],\"showSolution\":false,\"selectedIndex\":0,\"judge\":false,\"treatOutputAsHTML\":false,\"version\":\"5.0\",\"title\":\"\",\"language\":\"javascript\",\"content\":\"const gulp = require(\'gulp\');\",\"enableHiddenCode\":false,\"runnable\":false},\"hash\":\"30\",\"iteration\":0},{\"type\":\"MarkdownEditor\",\"mode\":\"view\",\"content\":{\"version\":\"2.0\",\"text\":\"\\nThis will store Gulp on a new variable called `gulp`. You will notice that I used `const` here! This `gulpfile.js` will be our first JavaScript file that uses ES6. I won\'t be going into much detail on the ES6 features we use here, that\'s what this book is for! We will discuss these features in more depth later throughout this book.\\n\\nGulp is all about tasks. We will start by defining some simple tasks in this file.\",\"mdHtml\":\"<p>This will store Gulp on a new variable called <code>gulp<\/code>. You will notice that I used <code>const<\/code> here! This <code>gulpfile.js<\/code> will be our first JavaScript file that uses ES6. I won\u2019t be going into much detail on the ES6 features we use here, that\u2019s what this book is for! We will discuss these features in more depth later throughout this book.<\/p>\\n<p>Gulp is all about tasks. We will start by defining some simple tasks in this file.<\/p>\\n\",\"comp_id\":\"78068c44-8df6-476f-92a9-071ed414b668\"},\"hash\":\"31\",\"iteration\":0},{\"type\":\"Code\",\"mode\":\"view\",\"content\":{\"solutionContent\":\"\\n\\n\\n\",\"judgeContent\":null,\"hiddenCodeContent\":null,\"enableStdin\":false,\"caption\":\"\",\"theme\":\"default\",\"evaluateWithoutExecution\":false,\"comp_id\":\"df78e3b0-ab2d-4dae-873c-f1b8ad37be8d\",\"allowDownload\":false,\"additionalContent\":[],\"showSolution\":false,\"selectedIndex\":0,\"judge\":false,\"treatOutputAsHTML\":false,\"version\":\"5.0\",\"title\":\"\",\"language\":\"javascript\",\"content\":\"const gulp = require(\'gulp\');\\n\\ngulp.task(\'js\', () => {\\n  \\n});\\n\\ngulp.task(\'default\', () => {\\n  \\n});\",\"enableHiddenCode\":false,\"runnable\":false},\"hash\":\"32\",\"iteration\":0},{\"type\":\"MarkdownEditor\",\"mode\":\"view\",\"content\":{\"version\":\"2.0\",\"text\":\"\\nThe `() =>` above is the syntax for an ES6 arrow function. Don\'t worry if you aren\'t familiar with this - we will discuss it later.\\n\\nThe two tasks we have created will work together, and also separately if we would like. The first of the tasks is one we will call `js` (note that you can call a task anything you want with the exception of `default`). The `js` task will deal with taking our JS and running it through Babel. In order to run this task we can run `gulp js` in our terminal. Of course, we have to define the task first.\\n\\nThe second task is called `default`. This is a special task: in here we can set up code that will kick off many other tasks, or in our case create a listener for when certain files change. To run this task we can simply type `gulp` in the terminal. Gulp knows that if it just sees `gulp` it will run the `default` task.\\n\\n### The js task\\n\\nBefore we get started we have to install a module the will allow babel to work with gulp. Oddly enough this module is called `gulp-babel`. Type `npm install --save-dev gulp-babel` into your terminal to start downloading the `gulp-babel` package.\\n\\nIn our gulp file, let\'s add these lines:\",\"mdHtml\":\"<p>The <code>() =&gt;<\/code> above is the syntax for an ES6 arrow function. Don\u2019t worry if you aren\u2019t familiar with this - we will discuss it later.<\/p>\\n<p>The two tasks we have created will work together, and also separately if we would like. The first of the tasks is one we will call <code>js<\/code> (note that you can call a task anything you want with the exception of <code>default<\/code>). The <code>js<\/code> task will deal with taking our JS and running it through Babel. In order to run this task we can run <code>gulp js<\/code> in our terminal. Of course, we have to define the task first.<\/p>\\n<p>The second task is called <code>default<\/code>. This is a special task: in here we can set up code that will kick off many other tasks, or in our case create a listener for when certain files change. To run this task we can simply type <code>gulp<\/code> in the terminal. Gulp knows that if it just sees <code>gulp<\/code> it will run the <code>default<\/code> task.<\/p>\\n<h3>The js task<\/h3>\\n<p>Before we get started we have to install a module the will allow babel to work with gulp. Oddly enough this module is called <code>gulp-babel<\/code>. Type <code>npm install --save-dev gulp-babel<\/code> into your terminal to start downloading the <code>gulp-babel<\/code> package.<\/p>\\n<p>In our gulp file, let\u2019s add these lines:<\/p>\\n\",\"comp_id\":\"6692e724-6b17-4d39-aeb0-164204bfccaf\"},\"hash\":\"33\",\"iteration\":0},{\"type\":\"Code\",\"mode\":\"view\",\"content\":{\"solutionContent\":\"\\n\\n\\n\",\"judgeContent\":null,\"hiddenCodeContent\":null,\"enableStdin\":false,\"caption\":\"\",\"theme\":\"default\",\"evaluateWithoutExecution\":false,\"comp_id\":\"f700441d-3e6f-4db2-852e-123eec043927\",\"allowDownload\":false,\"additionalContent\":[],\"showSolution\":false,\"selectedIndex\":0,\"judge\":false,\"treatOutputAsHTML\":false,\"version\":\"5.0\",\"title\":\"\",\"language\":\"javascript\",\"content\":\"const gulp = require(\'gulp\');\\nconst babel = require(\'gulp-babel\');\\n\\ngulp.task(\'js\', () => {\\n    return gulp.src(\'.\/src\/app.js\')\\n        .pipe(babel({\\n            presets: [\'es2015\']\\n        }))\\n        .pipe(gulp.dest(\'.\/public\'));\\n});\\n\\ngulp.task(\'default\', () => {\\n    \\n});\",\"enableHiddenCode\":false,\"runnable\":false},\"hash\":\"34\",\"iteration\":0},{\"type\":\"MarkdownEditor\",\"mode\":\"view\",\"content\":{\"version\":\"2.0\",\"text\":\"\\nThe first thing we do is to require `gulp-babel`, then in our `js` task we return `gulp.src(\'.\/src\/app.js\')`. We return this to let gulp know that this will be an asynchronous event. The `.src` method lets us set the path for our file, and in this case it is a single file. When we get to the modules portion of this book we will change this to be a bit more robust. Gulp works with streams, meaning that we can keep moving the data down the pipe, so using the `.pipe` method we take the source files and send them through babel.\\n\\nJust like earlier, we need to specify the presets we want to use. To do this, we can pass an object to the babel function to tell the babel plugin which preset we would like to use. Our source gets transformed into browser-ready code, and it gets passed along again, so we can pipe it into `gulp.dest`, which sets the final destination.\\n\\nNow that our task is complete, running `gulp js` in the terminal should produce this output!\",\"mdHtml\":\"<p>The first thing we do is to require <code>gulp-babel<\/code>, then in our <code>js<\/code> task we return <code>gulp.src(\'.\/src\/app.js\')<\/code>. We return this to let gulp know that this will be an asynchronous event. The <code>.src<\/code> method lets us set the path for our file, and in this case it is a single file. When we get to the modules portion of this book we will change this to be a bit more robust. Gulp works with streams, meaning that we can keep moving the data down the pipe, so using the <code>.pipe<\/code> method we take the source files and send them through babel.<\/p>\\n<p>Just like earlier, we need to specify the presets we want to use. To do this, we can pass an object to the babel function to tell the babel plugin which preset we would like to use. Our source gets transformed into browser-ready code, and it gets passed along again, so we can pipe it into <code>gulp.dest<\/code>, which sets the final destination.<\/p>\\n<p>Now that our task is complete, running <code>gulp js<\/code> in the terminal should produce this output!<\/p>\\n\",\"comp_id\":\"cbaacffc-32d8-4aab-948c-d4ecc507fbc4\"},\"hash\":\"35\",\"iteration\":0},{\"type\":\"Code\",\"mode\":\"view\",\"content\":{\"solutionContent\":\"\\n\\n\\n\",\"judgeContent\":null,\"hiddenCodeContent\":null,\"enableStdin\":false,\"caption\":\"\",\"theme\":\"default\",\"evaluateWithoutExecution\":false,\"comp_id\":\"50d36ff4-594c-464c-9623-e197e6878b64\",\"allowDownload\":false,\"additionalContent\":[],\"showSolution\":false,\"selectedIndex\":0,\"judge\":false,\"treatOutputAsHTML\":false,\"version\":\"5.0\",\"title\":\"\",\"language\":\"javascript\",\"content\":\"[19:50:35] Using gulpfile ~\/Sites\/lets-learn\/book\/testfiles\/gulpfile.js\\n[19:50:35] Starting \'js\'...\\n[19:50:35] Finished \'js\' after 102 ms\",\"enableHiddenCode\":false,\"runnable\":false},\"hash\":\"36\",\"iteration\":0},{\"type\":\"MarkdownEditor\",\"mode\":\"view\",\"content\":{\"version\":\"2.0\",\"text\":\"\\nIf you don\'t have any errors, then everything should be good. Gulp will have run, taken your `app.js` from the `src` folder, transformed it, and saved it to the `public` folder.\\n\\nYou might have noticed that this only ran once. If we change some code, we have to run it again. Let\'s set up the ability for gulp to keep watching our files.\",\"mdHtml\":\"<p>If you don\u2019t have any errors, then everything should be good. Gulp will have run, taken your <code>app.js<\/code> from the <code>src<\/code> folder, transformed it, and saved it to the <code>public<\/code> folder.<\/p>\\n<p>You might have noticed that this only ran once. If we change some code, we have to run it again. Let\u2019s set up the ability for gulp to keep watching our files.<\/p>\\n\",\"comp_id\":\"952c6a02-12f5-4f99-80fa-c88a3f55e148\"},\"hash\":\"37\",\"iteration\":0},{\"type\":\"Code\",\"mode\":\"view\",\"content\":{\"solutionContent\":\"\\n\\n\\n\",\"judgeContent\":null,\"hiddenCodeContent\":null,\"enableStdin\":false,\"caption\":\"\",\"theme\":\"default\",\"evaluateWithoutExecution\":false,\"comp_id\":\"2c79554b-c258-48d7-a6ae-f9a700f87ace\",\"allowDownload\":false,\"additionalContent\":[],\"showSolution\":false,\"selectedIndex\":0,\"judge\":false,\"treatOutputAsHTML\":false,\"version\":\"5.0\",\"title\":\"\",\"language\":\"javascript\",\"content\":\"gulp.task(\'default\', [\'js\'],() => {\\n    gulp.watch(\'src\/app.js\',[\'js\']);\\n});\",\"enableHiddenCode\":false,\"runnable\":false},\"hash\":\"38\",\"iteration\":0},{\"type\":\"MarkdownEditor\",\"mode\":\"view\",\"content\":{\"version\":\"2.0\",\"text\":\"\\nAltering the `default` task we add an additional argument, an array, for the tasks that we want to fire when we first use the task. The `gulp.watch` method takes a few arguments: a file path that waits for file changes, and an array of the task(s) you want to run. Now we can just run `gulp`.\",\"mdHtml\":\"<p>Altering the <code>default<\/code> task we add an additional argument, an array, for the tasks that we want to fire when we first use the task. The <code>gulp.watch<\/code> method takes a few arguments: a file path that waits for file changes, and an array of the task(s) you want to run. Now we can just run <code>gulp<\/code>.<\/p>\\n\",\"comp_id\":\"1f6293c9-8bf5-4223-bf67-9c9f9cce3f55\"},\"hash\":\"39\",\"iteration\":0},{\"type\":\"Code\",\"mode\":\"view\",\"content\":{\"solutionContent\":\"\\n\\n\\n\",\"judgeContent\":null,\"hiddenCodeContent\":null,\"enableStdin\":false,\"caption\":\"\",\"theme\":\"default\",\"evaluateWithoutExecution\":false,\"comp_id\":\"ff196a29-9052-45f3-8947-543a7263746c\",\"allowDownload\":false,\"additionalContent\":[],\"showSolution\":false,\"selectedIndex\":0,\"judge\":false,\"treatOutputAsHTML\":false,\"version\":\"5.0\",\"title\":\"\",\"language\":\"javascript\",\"content\":\"$ gulp\\n[21:26:50] Using gulpfile ~\/Sites\/lets-learn\/book\/testfiles\/gulpfile.js\\n[21:26:50] Starting \'js\'...\\n[21:26:50] Finished \'js\' after 102 ms\\n[21:26:50] Starting \'default\'...\\n[21:26:50] Finished \'default\' after 6.73 ms\",\"enableHiddenCode\":false,\"runnable\":false},\"hash\":\"40\",\"iteration\":0},{\"type\":\"MarkdownEditor\",\"mode\":\"view\",\"content\":{\"version\":\"2.0\",\"text\":\"\\nChanging your `src\/app.js` file will run the `js` task again! Let\'s get into learning about ES6 so that we can use this file. In a later chapter we will add to this file.\\n\\n## Additional Resources\\n- 1:https:\/\/babeljs.io\/\\n- 2:https:\/\/www.youtube.com\/watch?v=rKuNbEwoQfQ\\n- 3:http:\/\/commandlinepoweruser.com\/\\n- 4:http:\/\/babeljs.io\/docs\/plugins\/#presets\\n- 5:https:\/\/babeljs.io\/docs\/usage\/cli\/\\n- 6:http:\/\/gulpjs.com\/\",\"mdHtml\":\"<p>Changing your <code>src\/app.js<\/code> file will run the <code>js<\/code> task again! Let\u2019s get into learning about ES6 so that we can use this file. In a later chapter we will add to this file.<\/p>\\n<h2>Additional Resources<\/h2>\\n<ul>\\n<li>1:<a href=\\\"https:\/\/babeljs.io\/\\\">https:\/\/babeljs.io\/<\/a><\/li>\\n<li>2:<a href=\\\"https:\/\/www.youtube.com\/watch?v=rKuNbEwoQfQ\\\">https:\/\/www.youtube.com\/watch?v=rKuNbEwoQfQ<\/a><\/li>\\n<li>3:<a href=\\\"http:\/\/commandlinepoweruser.com\/\\\">http:\/\/commandlinepoweruser.com\/<\/a><\/li>\\n<li>4:<a href=\\\"http:\/\/babeljs.io\/docs\/plugins\/#presets\\\">http:\/\/babeljs.io\/docs\/plugins\/#presets<\/a><\/li>\\n<li>5:<a href=\\\"https:\/\/babeljs.io\/docs\/usage\/cli\/\\\">https:\/\/babeljs.io\/docs\/usage\/cli\/<\/a><\/li>\\n<li>6:<a href=\\\"http:\/\/gulpjs.com\/\\\">http:\/\/gulpjs.com\/<\/a><\/li>\\n<\/ul>\\n\",\"comp_id\":\"7f64f9ab-4177-4d83-bee5-e819e35ad41f\"},\"hash\":\"41\",\"iteration\":0}],\"summary\":{\"title\":\"Using ES6 now\"},\"pageProperties\":{}}';